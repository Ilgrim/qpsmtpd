#!/home/perl/bin/perl -Tw
# Copyright (c) 2001 Ask Bjoern Hansen. See the LICENSE file for details.
# The "command dispatch" system is taken from colobus - http://trainedmonkey.com/colobus/
#
# this is designed to be run under tcpserver (http://cr.yp.to/ucspi-tcp.html)
# or inetd if you're into that sort of thing
#
#
# For more information see http://develooper.com/code/qpsmtpd/
#
#

use lib 'lib';
use Qpsmtpd::TcpServer;
use strict;
$| = 1;

delete $ENV{ENV};
$ENV{PATH} = '/var/qmail/bin';

use vars qw($TRACE);
$TRACE = 5;

# should this be ->new ?
my $qpsmtpd = Qpsmtpd::TcpServer->new();
$qpsmtpd->start_connection();
$qpsmtpd->run();

__END__

sub data {
  respond(503, "MAIL first"), return 1 unless $state{transaction}->{from};
  respond(503, "RCPT first"), return 1 unless $state{transaction}->{rcpt};
  respond(354, "go ahead");
  my $buffer = '';
  my $size = 0;
  my $i = 0;
  my $max_size = (get_config('databytes'))[0] || 0;
  my $blocked = "";
  my %matches;
  my $header = 1;
  my $complete = 0;

  warn "$$ max_size: $max_size / size: $size" if $TRACE > 5;

  while (<STDIN>) {
    $complete++, last if $_ eq ".\r\n";
    $i++;
    respond(451, "See http://develooper.com/code/qpsmtpd/barelf.html"), exit
      if $_ eq ".\n";
    unless ($max_size and $size > $max_size) {
      s/\r\n$/\n/;
      $header = 0 if $header and m/^\s*$/;

      if ($header) {

	$matches{"aol.com"} = 1 if m/aol\.com/;

	$blocked = "Your mail looks too much like that SirCam nonsense, please go away"
	  if $state{transaction}->{from}->format eq "<>"
	     and $_ eq "Content-Disposition: Multipart message\n";
	   
	$blocked = "No List Builder spam for us, thank you."
	  if m/^From: List Builder <notifications\@bcentral.com>/;

	$blocked = q[Don't send W32.Badtrans.B@mm virus to us, please]
	  if $matches{"aol.com"} and m/^From: .* <_/;
      }
      

      # Might be klez
      m/^Content-type:.*(?:audio|application)/i
          and $matches{"klez"}=1;

      # we've seen the Klez signature, we're probably infected
      $blocked = q[Take your Klez virus and stuff it!  HAND.]
         if $matches{"klez"} and m!^TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQA!;

      $buffer .= $_;
      $size += length $_;
    }
    warn "$$ size is at $size\n" unless ($i % 300);

    alarm $config{timeout};
  }

  warn "$$ max_size: $max_size / size: $size" if $TRACE > 5;

  # if we get here without seeing a terminator, the connection is
  # probably dead.
  respond(451, "Incomplete DATA"), return 1 unless $complete;
 
  respond(550, $blocked),return 1 if $blocked;
  respond(552, "Message too big!"),return 1 if $max_size and $size > $max_size;

  # these bits inspired by Peter Samuels "qmail-queue wrapper"
  pipe(MESSAGE_READER, MESSAGE_WRITER) or fault("Could not create message pipe"), exit;
  pipe(ENVELOPE_READER, ENVELOPE_WRITER) or fault("Could not create envelope pipe"), exit;

  my $child = fork();
  
  not defined $child and fault(451, "Could not fork"), exit;

  if ($child) {
    # Parent
    my $oldfh = select(MESSAGE_WRITER); $| = 1; 
                select(ENVELOPE_WRITER); $| = 1;
    select($oldfh);

    close MESSAGE_READER  or fault("close msg reader fault"),exit;
    close ENVELOPE_READER or fault("close envelope reader fault"), exit;
    print MESSAGE_WRITER "Received: from $state{remote_info} (HELO $state{hello_host}) ($state{remote_ip})\n";
    print MESSAGE_WRITER "  by $config{me} (qpsmtpd/$QPsmtpd::VERSION) with SMTP; ", scalar gmtime, " -0000\n";
    print MESSAGE_WRITER $buffer;
    close MESSAGE_WRITER;

    my @rcpt = map { "T" . $_->address } @{$state{transaction}->{rcpt}};
    my $from = "F".($state{transaction}->{from}->address|| "" );
    print ENVELOPE_WRITER "$from\0", join("\0",@rcpt), "\0\0"
      or respond(451,"Could not print addresses to queue"),exit;
    
    close ENVELOPE_WRITER;
    waitpid($child, 0);
    my $exit_code = $? >> 8;
    $exit_code and respond(451, "Unable to queue message ($exit_code)"), exit;
    respond(250, "Message queued; it better be worth it.");
  }
  elsif (defined $child) {
    # Child
    close MESSAGE_WRITER or die "could not close message writer in parent";
    close ENVELOPE_WRITER or die "could not close envelope writer in parent";
    
    open(STDIN, "<&MESSAGE_READER") or die "b1";
    open(STDOUT, "<&ENVELOPE_READER") or die "b2";
    
    unless (exec '/var/qmail/bin/qmail-queue') {
      die "should never be here!";
    }
  }
  
  return 1;
}

sub rset {
  $state{transaction} = {};
  respond(250, "OK");
}

sub noop {
  respond(250, "OK");
}

sub vrfy {
  respond(252, "Just try sending a mail and we'll see how it turns out ...");
}


sub check_rhsbl {
  my ($rhsbl, $host) = @_;
  return 0 unless $host;
  warn "$$ checking $host in $rhsbl\n" if $TRACE > 2;
  return 1 if ((gethostbyname("$host.$rhsbl"))[4]);
  return 0;
}

sub check_dns {
  my $host = shift;

  # for stuff where we can't even parse a hostname out of the address
  return 0 unless $host;

  return 1 if $host =~ m/^\[(\d{1,3}\.){3}\d{1,3}\]$/;

  my $res = new Net::DNS::Resolver;
  return 1 if mx($res, $host);
  my $query = $res->search($host);
  if ($query) {
    foreach my $rr ($query->answer) {
      return 1 if $rr->type eq "A" or $rr->type eq "MX";
    }
  }
  else {
    warn "$$ query for $host failed: ", $res->errorstring, "\n"
      unless $res->errorstring eq "NXDOMAIN";
  }
  return 0;
}


sub load_plugins {
  my @plugins = get_config('plugins');

  my ($name) = ($0 =~ m!(.*?)/([^/]+)$!);
  my $dir = "$name/plugins";
  warn "$$ loading plugins from $dir" if $TRACE;
}

1;
